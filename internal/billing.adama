// This is an internal Adama "program" which Adama's service depends on
@static {
  create {
    return @who.isAdamaDeveloper() && @context.origin == "adama" && @context.ip == "0.0.0.0";
  }
  maximum_history = 250;
}
public long cutoff = 0;
public principal owner;
public string email;

message Cons {
  string email;
}

@construct (Cons c) {
  owner = @who;
  email = c.email;
}

@connected {
  return @who == owner || @who.isAdamaHost();
}

/////////////////////////////////////////////////////////////////////////
// Records and messages for storing and receiving messages from the fleet
record MeteringRecord {
  public long cpu;
  public long messages;
  public long count_p95;
  public long memory_p95;
  public long connections_p95;
  public long bandwidth;
  public long first_party_service_calls;
  public long third_party_service_calls;
}

record UsageRecord {
  public int id;
  public long timestamp;
  public string space;
  public string region;
  public string machine;
  public MeteringRecord record;

  public formula org_key = region + "/" + machine + "/" + space;
}

record SystemUsage {
  public int id;
  public long timestamp;
  public int domains;
  public int authorities;
}

record StorageRecord {
  public int id;
  public long timestamp;
  public string space;
  public long bytes_used;
}

message NewUsageRecord {
  long timestamp;
  string space;
  string region;
  string machine;
  NewMeteringRecord record;
}

message NewMeteringRecord {
  long cpu;
  long messages;
  long count_p95;
  long memory_p95;
  long connections_p95;
  long bandwidth;
  long first_party_service_calls;
  long third_party_service_calls;
}

message NewStorage {
  string space;
  long timestamp;
  long bytes_used;
}

message NewSystemUsage {
  long timestamp;
  int domains;
  int authorities;
}

/////////////////////////////////////////////////////////////////////////
// Tables for unbilled resources

table<UsageRecord> _unbilled_usage;
table<SystemUsage> _unbilled_system_usage;
table<StorageRecord> _unbilled_storage;

/////////////////////////////////////////////////////////////////////////
// Data flow into the unbilled tables

/* this channel is fired directly from adama */
channel ingest_new_usage_record(NewUsageRecord u) open {
  if (@who.isAdamaHost()) {
    _unbilled_usage <- u;
    on_next_timestamp(u.timestamp);
  }
}

channel ingest_new_storage_record(NewStorage u) open {
  if (@who.isAdamaHost()) {
    _unbilled_storage <- u;
    on_next_timestamp(u.timestamp);
  }
}

channel ingest_new_system_usage(NewSystemUsage u) open {
  if (@who.isAdamaHost()) {
    _unbilled_system_usage <- u;
    on_next_timestamp(u.timestamp);
  }
}

/////////////////////////////////////////////////////////////////////////
// Reduction from unbilled resources to billing records

record BillingRecord {
  public int id;
  public datetime at;
  public long bricks;
  public long cpu;
  public long messages;
  public long count;
  public long memory;
  public long connections;
  public long bandwidth;
  public long first_party_service_calls;
  public long third_party_service_calls;
  public int domains;
  public int authorities;
  public long bytes_used;
  public long cost_ap;
}

table<BillingRecord> _records;

message Brick {
  long cpu;
  long memory;
  long bricks; // this is a combination of cpu and memory
  long count;
  long connections;
}

// this is one time series for a space and host
function convert_records_to_brick(list<MeteringRecord> records) -> Brick {
  Brick b;
  b.cpu = records.cpu.sum().getOrDefaultTo(0);
  b.memory = records.memory_p95.average().longOf().getOrDefaultTo(0);
  b.count = records.count_p95.average().longOf().getOrDefaultTo(0);
  b.connections = records.connections_p95.average().longOf().getOrDefaultTo(0);
  b.bricks = Math.max((b.cpu / 1000000).ceil(), (b.memory / 1048576).ceil()).longOf().getOrDefaultTo(1);
  return b;
}



message PreviewBillingRecord {
  datetime at;
  long bricks;
  long cpu;
  long messages;
  long count;
  long memory;
  long connections;
  long bandwidth;
  long first_party_service_calls;
  long third_party_service_calls;
  int domains;
  int authorities;
  long bytes_used;
  long cost_ap;
}

function preview_record(list<StorageRecord> storage_records_in_play, list<SystemUsage> system_usage_in_play, list<UsageRecord> usage_in_play) -> PreviewBillingRecord {
  long bytes_used = 0;
  foreach (kvp in (storage_records_in_play reduce space via @lambda x: x.bytes_used.average())) {
    bytes_used += kvp.value.longOf().getOrDefaultTo(0L);
  }
  int domains = system_usage_in_play.domains.average().ceil().intOf().getOrDefaultTo(0);
  int authorities = system_usage_in_play.authorities.average().ceil().intOf().getOrDefaultTo(0);
  long first_party_service_calls = usage_in_play.record.first_party_service_calls.sum().getOrDefaultTo(0L);
  long third_party_service_calls = usage_in_play.record.third_party_service_calls.sum().getOrDefaultTo(0L);
  long bandwidth = usage_in_play.record.bandwidth.sum().getOrDefaultTo(0L);
  long bricks = 0;
  long cpu = 0;
  long messages = usage_in_play.record.messages.sum().getOrDefaultTo(0L);
  long count = 0;
  long memory = 0;
  long connections = 0;
  foreach (kvp in usage_in_play reduce org_key via @lambda x: convert_records_to_brick(x.record)) {
    bricks += kvp.value.bricks;
    cpu += kvp.value.cpu;
    count += kvp.value.count;
    memory += kvp.value.memory;
    connections += kvp.value.connections;
  }

  long cost_ap = bricks * 10 // 10 AP/brick-hr
    + connections // 1 AP/connection-hr
    + Math.ceil(bytes_used / 10737418.24).longOf().getOrDefaultTo(0) // 100 AP / 1 GB-hr ~ 1 AP / 10 MB-hr
    + Math.ceil(bandwidth / 10485.76).longOf().getOrDefaultTo(0) // 100 AP / MB ~ 1 AP / 10K
    + first_party_service_calls * 10 // 10 AP per call
    + third_party_service_calls * 20 // 25 AP per call
    + domains * 700 // 700 AP/domain hour
    ;
  return {
    at: Time.datetime(),
    bricks:bricks,
    cpu:cpu,
    messages:messages,
    count:count,
    memory:memory,
    connections:connections,
    bandwidth:bandwidth,
    first_party_service_calls:first_party_service_calls,
    third_party_service_calls:third_party_service_calls,
    domains:domains,
    authorities:authorities,
    bytes_used:bytes_used,
    cost_ap:cost_ap
  };
}

// cut all unbilled usage into a single record for a given hour
procedure cut_billing_record() {
  list<StorageRecord> storage_records_in_play = iterate _unbilled_storage where timestamp <= cutoff;
  list<SystemUsage> system_usage_in_play = iterate _unbilled_system_usage where timestamp <= cutoff;
  list<UsageRecord> usage_in_play = iterate _unbilled_usage where timestamp <= cutoff;
  _records <- preview_record(storage_records_in_play, system_usage_in_play, usage_in_play);
  // TODO: consider storing to S3 (could use a nice and dandy little s3 archiver)
  storage_records_in_play.delete();
  system_usage_in_play.delete();
  usage_in_play.delete();
}

public formula preview_current_record = preview_record(iterate _unbilled_storage where timestamp <= cutoff, iterate _unbilled_system_usage where timestamp <= cutoff, iterate _unbilled_usage where timestamp <= cutoff);

// an event feed from various unbilled record insertions
procedure on_next_timestamp(long timestamp) {
  if (cutoff == 0) { // there has been no timeline established
    cutoff = timestamp + 3600000;
  }
  // we are 30 minutes past the cutoff
  if (timestamp > cutoff + 1800000) {
    // cut the records and reset the timeline
    cut_billing_record();
    cutoff += 3600000;
  }
}

public formula current_records_for_invoice = iterate _records;

// For debugging, TODO: remove
public formula unbilled_storage = iterate _unbilled_storage where timestamp <= cutoff;
public formula unbilled_usage = iterate _unbilled_usage where timestamp <= cutoff;
public formula unbilled_system_usage = iterate _unbilled_system_usage where timestamp <= cutoff;

/////////////////////////////////////////////////////////////////////////
// Collect user information to process stripe transaction

message Empty {}

channel initialize_token(Empty m) {
  ViewState.log("Hello World");
}

record BillingInformation {
  public string name;
  public string address1;
  public string address2;
  public string city;
  public string state;
  public string country;
  public string postal;
}

public BillingInformation billing_information;

message UpdateBillingInformation {
  string name;
  string address1;
  string address2;
  string city;
  string state;
  string country;
  string postal;
}

channel update_billing_information(UpdateBillingInformation bi) {
  billing_information <- bi;
  // TODO: sync with Stripe
}
