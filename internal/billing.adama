// This is an internal Adama "program" which Adama's service depends on
@static {
  create {
    return @who.isAdamaDeveloper() && @context.origin == "adama" && @context.ip == "0.0.0.0";
  }
  maximum_history = 250;
}

public principal owner;
public string email;

message Cons {
  string email;
}

@construct (Cons c) {
  owner = @who;
  email = c.email;
}

@connected {
  return @who == owner || @who.isAdamaHost();
}

record MeteringRecord {
  public long cpu;
  public long messages;
  public long count_p95;
  public long memory_p95;
  public long connections_p95;
  public long bandwidth;
  public long first_party_service_calls;
  public long third_party_service_calls;
}

message NewMeteringRecord {
  long cpu;
  long messages;
  long count_p95;
  long memory_p95;
  long connections_p95;
  long bandwidth;
  long first_party_service_calls;
  long third_party_service_calls;
}

record UsageRecord {
  public int id;
  public long timestamp;
  public string space;
  public string region;
  public string machine;
  public MeteringRecord record;
}

message NewUsageRecord {
  long timestamp;
  string space;
  string region;
  string machine;
  NewMeteringRecord record;
}

table<UsageRecord> _unbilled_usage;

/* this channel is fired directly from adama */
channel ingest_new_usage_record(NewUsageRecord record) open {
  if (@who.isAdamaHost()) {
    _unbilled_usage <- record;
  }
}

message NewSystemUsage {
  long timestamp;
  int domains;
  int authorities;
}

record SystemUsage {
  public int id;
  public long timestamp;
  public int domains;
  public int authorities;
}

table<SystemUsage> _unbilled_system_usage;

channel ingest_new_system_usage(NewSystemUsage usage) open {
  if (@who.isAdamaHost()) {
    _unbilled_system_usage <- usage;
  }
}


message NewStorage {
  string space;
  long timestamp;
  long bytes_used;
}

record StorageRecord {
  public int id;
  public long timestamp;
  public string space;
  public long bytes_used;
}

table<StorageRecord> _unbilled_storage;

channel ingest_new_storage_record(NewStorage storage) open {
  if (@who.isAdamaHost()) {
    _unbilled_storage <- storage;
  }
}

public formula unbilled_storage = iterate _unbilled_storage;
public formula unbilled_usage = iterate _unbilled_usage;
public formula unbilled_system_usage = iterate _unbilled_system_usage;

message Empty {}

channel initialize_token(Empty m) {
  ViewState.log("Hello World");
}

message BillingInformation {
  string name;
  string address1;
  string address2;
  string city;
  string state;
  string country;
  string postal;
}

channel update_billing_information(BillingInformation bi) {

}

@load {
  // for now, we don't keep anything until we reduce down into daily usage reports
  // (iterate _unbilled_storage).delete();
  // (iterate _unbilled_usage).delete();
}
